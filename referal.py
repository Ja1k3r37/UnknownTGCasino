import logging
from aiogram import Bot, Dispatcher, executor, types
import config 
from referaldb import DataBase
from telebot import types

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
import sqlite3
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import random
from aiogram.types import InputFile

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = DataBase('last.sqlite3')
conn = sqlite3.connect('last.sqlite3')
class dialog(StatesGroup):
    spam = State()
    blacklist = State()
    whitelist = State()



knopka_one = KeyboardButton('/Mamonts_For_Admin')
knopka_two = KeyboardButton('/Scammers_For_Admin')
knopka_three = KeyboardButton('/Scammers_For_Admin')

keyboard_admin = ReplyKeyboardMarkup()

keyboard_admin.add(knopka_one).add(knopka_two).add(knopka_three) #–ê–¥–º–∏–Ω –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

buttons_list = ['button_1', 'button_2', 'button_3', 'button_4', 'button_5', 'button_6', 'button_7', 'button_8', 'button_9', 'button_10',
                'button_11', 'button_12', 'button_13', 'button_14', 'button_15']

group_of_mamonts = []
test_list = []

Play = InlineKeyboardButton(text='üé∞–ò–≥—Ä–∞—Ç—å', callback_data='Play')
Bank = InlineKeyboardButton(text='üè¶–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç', callback_data='Bank')
Support = InlineKeyboardButton(text='üë®‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='Support')
Information = InlineKeyboardButton(text='‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='Information')
Popolnenie = InlineKeyboardButton(text='üì•–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='POPOLNENIE')
Vivod = InlineKeyboardButton(text='üì§–í—ã–≤–µ—Å—Ç–∏', callback_data='VIVOD')


start_keyboard = InlineKeyboardMarkup(row_width=2)
start_keyboard.row(Play, Bank)
start_keyboard.row(Support, Information)
start_keyboard.row(Popolnenie, Vivod)
class user(StatesGroup):
    answer = State()
    mamont_id = State()
    mamont_money = State()
    win_or_lose = State()
    amount_qiwi_money = State()
    summa_stavki = State()
    numbers_percent = State()
    summa_stavki2 = State()
    vivod_card = State()
    summa_vivoda = State()
    summa_popolnenie = State()
class MyStates(StatesGroup):
    state1 = State()

@dp.message_handler(commands=['start', '–º–µ–Ω—é'])
async def start(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            pass
            start_command = message.text
            referrer_id = str(start_command[7:])
            if str(referrer_id) != "":
                if str(referrer_id) != str(message.from_user.id):
                    db.add_user(message.from_user.id, referrer_id)
                    try:
                        await bot.send_message(referrer_id, f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è <b>–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> - {message.from_user.username}", parse_mode='html')
                    except:
                        pass
                else:
                    await bot.send_message(message.from_user.id, f'–ü–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è')
            else:
                db.add_user(message.from_user.id)
        db.start_message(message.from_user.id)
        with open('image.jpg', 'rb') as photo:
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FonBet Casino üé∞\n\n üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @ijustwait\n\n<b>–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É</b>", parse_mode='html', reply_markup=start_keyboard)

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await bot.send_message(message.from_user.id, f'–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start <b>{message.from_user.username}</b>', parse_mode='html')



@dp.message_handler()
async def bot_message(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '–ü—Ä–æ—Ñ–∏–ª—å –≤ –≤–æ—Ä–∫ –ø–∞–Ω–µ–ª–∏':
            try:
                await bot.send_message(message.from_user.id, f"ID: {message.from_user.id}\n https://t.me/{config.BOT_NICKNAME}?start={message.from_user.id}\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db.count_referals(message.from_user.id)}")
            except Exception as e: print(e)
      
        if message.text == '–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞':
             sqlite_connection = sqlite3.connect('last.sqlite3')
             cursor = sqlite_connection.cursor()
             sqlite_select_query = f"""SELECT user_id, refferer_money FROM users WHERE referrer_id = {message.from_user.id}"""
             cursor.execute(sqlite_select_query)
             records = cursor.fetchall()
             
             
             main_menuuu = ReplyKeyboardMarkup(row_width=3)
             for row in records:
                    
                    knopochka = row[0]
                    try:
                        test_button = KeyboardButton(knopochka)
                        test_list.append(str(knopochka))
                        main_menuuu.add(test_button)
                        group_of_mamonts.append(test_button)
                        
                    except Exception as e: await bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞ - {e}')
             print(test_list)
             await bot.send_message(message.from_user.id, f"–í–∞—à–∏ –º–∞–º–æ–Ω—Ç—ã:", reply_markup=main_menuuu)

        if message.text in test_list:
            sqlite_connection = sqlite3.connect('last.sqlite3')
            cursor = sqlite_connection.cursor()
            sqlite_select_query = f"""SELECT user_id, refferer_money FROM users WHERE referrer_id = {message.from_user.id}"""
            cursor.execute(sqlite_select_query)
            records = cursor.fetchall()
            number_of_mamont = message.text
            sqlite_select_query = f"""SELECT refferer_money FROM users WHERE referrer_id = {message.from_user.id} AND user_id = {message.text}"""
            cursor.execute(sqlite_select_query)
            records = cursor.fetchall()
            print(records)
            await bot.send_message(message.from_user.id, f"ID –ú–∞–º–æ–Ω—Ç–∞ - `{number_of_mamont}`", parse_mode='MARKDOWN')
            await bot.send_message(message.from_user.id, f"–ë–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –º–∞–º–æ–Ω—Ç–∞ - {records[0][0]}")
            await message.answer("–ë—É–¥–µ—Ç–µ –º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞? –î–ê\–ù–ï–¢")
            await user.answer.set()
            

@dp.message_handler(state=user.answer)
async def get_answer(message: types.Message, state: FSMContext):
    await state.update_data(answer=message.text)
    data = await state.get_data()
    await user.next()
    if data['answer'] == '–î–ê':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞: ")
        await user.mamont_id.set()
    else:
        try:
            sqlite_connection.close()
        except:
            await state.finish()
            await returnim(message)


@dp.message_handler(state=user.mamont_id)
async def get_id(message: types.Message, state: FSMContext):
        await state.update_data(mamont_id=message.text)
        data = await state.get_data()
        sqlite_connection = sqlite3.connect('last.sqlite3')
        cursor = sqlite_connection.cursor()
        sqlite_select_query = f"""SELECT refferer_money FROM users WHERE referrer_id = {message.from_user.id} AND user_id = {data['mamont_id']}"""
        cursor.execute(sqlite_select_query)
        records = cursor.fetchall()
        await bot.send_message(message.from_user.id, f"{records}")# –í–´–í–û–î–ò–ú –î–í–£–ú–Ø –ú–ê–°–°–ò–í–ê–ú–ò
        await bot.send_message(message.from_user.id, f"{records[0][0]}") # –í–´–í–û–î –ß–ò–°–¢–û–ì–û –ß–ò–°–õ–ê
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞: ")
        await user.mamont_money.set()

@dp.message_handler(state=user.mamont_money)
async def DA_yaujehz(message: types.Message, state: FSMContext):
    await state.update_data(mamont_money=message.text)
    data = await state.get_data()
    sqlite_connection = sqlite3.connect('last.sqlite3')
    
    db.change_balance(data['mamont_id'], message.from_user.id, data['mamont_money'])
    print(f"{data['mamont_money']}")
    print(f" {message.from_user.id}")
    print(f"{data['mamont_id']}")
    await bot.send_message(message.from_user.id, f"–ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞ —Å <b>ID {data['mamont_id']}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{data['mamont_money']}</b>", parse_mode='html')
    await message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ –±—ã –º–∞–º–æ–Ω—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–ª - –í–≤–µ–¥–∏—Ç–µ 0 \n –î–ª—è –≤—ã–∏–≥—Ä—ã—à–µ–π –º–∞–º–æ–Ω—Ç–∞ - –í–≤–µ–¥–∏—Ç–µ 1')
    await user.win_or_lose.set()

@dp.message_handler(state=user.win_or_lose)
async def win_or_lose(message: types.Message, state: FSMContext):
    await state.update_data(win_or_lose=message.text)
    data = await state.get_data()
    print(message.from_user.id, data['mamont_id'], data['win_or_lose'])
    db.change_win_upd(data['win_or_lose'], data['mamont_id'], message.from_user.id)
    db.change_win(message.from_user.id)
    if data['win_or_lose'] == '1':
        await bot.send_message(message.from_user.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>–º–∞–º–æ–Ω—Ç–µ</b>: \n –ë–∞–ª–∞–Ω—Å: {data['mamont_money']}\n–í—ã–∏–≥—Ä—ã—à –º–∞–º–æ–Ω—Ç–∞: <b>True</b>", parse_mode='html')
        await bot.send_message(message.from_user.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>–º–∞–º–æ–Ω—Ç–µ</b>: \n –ë–∞–ª–∞–Ω—Å: {data['mamont_money']}\n–í—ã–∏–≥—Ä—ã—à –º–∞–º–æ–Ω—Ç–∞: {db.change_win(data['mamont_id'], message.from_user.id)[0][0]}", parse_mode='html')
    else:
        await bot.send_message(message.from_user.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>–º–∞–º–æ–Ω—Ç–µ</b>: \n –ë–∞–ª–∞–Ω—Å: {data['mamont_money']}\n–í—ã–∏–≥—Ä—ã—à –º–∞–º–æ–Ω—Ç–∞: <b>False</b>", parse_mode='html')
    await state.finish()
    return 'Hello world'
    


@dp.message_handler(commands=['returnim'])
async def returnim(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é!', parse_mode='html')

@dp.callback_query_handler(text='Bank')
async def Bank(message: types.Message):
    back_button = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='startingg')
    back_kb = InlineKeyboardMarkup()
    back_kb.add(back_button)
    with open('kabinet.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption=f"üè¶ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{message.from_user.username}</b>\n‚ï† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID: <b>{message.from_user.id}</b>\n\n üíµ –ë–∞–ª–∞–Ω—Å: <b>{db.show_balance(message.from_user.id)[0][0]} RUB</b>", parse_mode='html', reply_markup=back_kb)


@dp.callback_query_handler(text='Support')
async def Support(message: types.Message):
    back_button = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='startingg')
    back_kb = InlineKeyboardMarkup()
    back_kb.add(back_button)
    with open('support.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption=f"üë®‚Äçüíª –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n @ijustwait\n\nüìö –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n‚ûï –û–±—â–∞–π—Ç–µ—Å—å –≤–µ–∂–ª–∏–≤–æ, –ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É —Å–∏–¥–∏—Ç —Ç–∞–∫–æ–π –∂–µ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–∞–∫ –∏ –í—ã.\n\n‚ûï –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –µ–º–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n‚ûï –û–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.\n\n\‚ûï –§–ª—É–¥, —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –∫–ª–µ–≤–µ—Ç–∞ –∫—Ä–∞–µ—Ç—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–≥—Ä–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞.", reply_markup=back_kb)

@dp.callback_query_handler(text='VIVESTI')
async def VIVESTI(message: types.Message):
    button_start = KeyboardButton("/start", callback_data='start')
    VIVESTI_keyboard = ReplyKeyboardMarkup()
    VIVESTI_keyboard.add(button_start)
    await bot.send_message(message.from_user.id, f"üíµ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É: <b>{db.show_balance(message.from_user.id)[0][0]} RUB</b>\nüíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>5000 RUB</b>",parse_mode='html', reply_markup=VIVESTI_keyboard)

@dp.callback_query_handler(text='SETTINGS')
async def SETTINGS(message: types.Message):
    change_language = InlineKeyboardButton("üá∑üá∫ –í—ã–±–æ—Ä —è–∑—ã–∫–∞", callback_data='change_language')
    change_language_k = InlineKeyboardMarkup()
    change_language_k.add(change_language)
    await bot.send_message(message.from_user.id, "üî®–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", reply_markup=change_language_k)

@dp.callback_query_handler(text='Information')
async def Information(message: types.Message):
    back_button = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='startingg')
    back_kb = InlineKeyboardMarkup()
    back_kb.add(back_button)
    with open('information.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption=f"üåç *–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω*: `{random.randint(2000, 2500)}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\nüî• *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à*  : `{random.randint(2000, 10000)}` RUB\n\nüì§ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥*:  `{random.randint(300, 7000)}` RUB\n ‚ïö *–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è*: `{random.choice(['Partial', 'Missing', 'Complete'])}`", parse_mode='MARKDOWN', reply_markup=back_kb)

@dp.callback_query_handler(text='change_language')
async def change_language(message: types.Message):
    await bot.send_message(message.from_user.id, "–Ø–∑—ã–∫ <b>—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω</b> –Ω–∞ <b>RU</b>üá∑üá∫", parse_mode='html')



@dp.callback_query_handler(text='Play')
async def Play(message: types.Message):
    numbers = InlineKeyboardButton(text='üî¢ –ß–∏—Å–ª–∞', callback_data='numbers')
    dice = InlineKeyboardButton(text='üé≤ –ö–æ—Å—Ç–∏', callback_data='dice')
    back_button = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='startingg')
    play_kb = InlineKeyboardMarkup()
    play_kb.row(numbers)
    play_kb.row(dice, back_button)
    await bot.send_message(message.from_user.id, "üé∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∏–≥—Ä—É:</b>", parse_mode='html', reply_markup=play_kb)

@dp.callback_query_handler(text='startingg')
async def startingg(message: types.Message):
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è *–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é*", parse_mode='MARKDOWN')


@dp.callback_query_handler(text='numbers')
async def numbers(message: types.Message):
    await bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ üî•\n–í–∞—à –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]} RUB*\n –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ `–ª—é–±–æ–π —Å–∏–º–≤–æ–ª`", parse_mode='MARKDOWN')
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ üî•\n–í–∞—à –±–∞–ª–∞–Ω—Å: {db.show_balance(message.from_user.id)[0][0]} RUB")
    await user.summa_stavki.set()
            

@dp.message_handler(state=user.summa_stavki)
async def get_summa_stavki(message: types.Message, state: FSMContext):
    try:
        await state.update_data(summa_stavki=int(message.text))
        data = await state.get_data()
    except Exception as e:
        await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        await state.finish()
        print(f"{e} –ò –û–®–ò–ë–ö–ê –ù–ê 289 –°–¢–†–û–ö–ï")

    back_button = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='startingg')
    back_kb = InlineKeyboardMarkup()
    back_kb.add(back_button)
    try:
        mamont_balance = db.show_balance(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {mamont_balance}")
        data['summa_stavki'] = int(data['summa_stavki'])
        sum = int(data['summa_stavki'])
        if sum <= 0:
            await bot.send_message(message.from_user.id, f"*–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ* —Å—Ç–∞–≤–∫–∏!", reply_markup=back_kb)
            await state.finish()
            return "Hello world :D"
        if sum > int(mamont_balance):
            await bot.send_message(message.from_user.id, f"–í–∞—à *–±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ* —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏!", eply_markup=back_kb)
            return "HELLO WORLD :D"
        if int(mamont_balance) > sum:
            bolwe_50 = KeyboardButton(">50")
            menwe_50 = KeyboardButton("<50")
            chislo_50 = KeyboardButton("=50")
            back_button = KeyboardButton('/–º–µ–Ω—é')
            greet_kb1 = ReplyKeyboardMarkup(resize_keyboard=True).add(bolwe_50).add(menwe_50).add(chislo_50)
            greet_kb1.add(back_button)

            await bot.send_message(message.from_user.id, f"–°–µ–π—á–∞—Å –≤—ã–ø–∞–¥–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥ —Å–æ–±—ã—Ç–∏—è ‚≠êÔ∏è\n\n*<50 - x2*\n*=50 - x10*\n* >50 - x2*", reply_markup=greet_kb1, parse_mode='MARKDOWN')
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: ")
            await user.numbers_percent.set()
    except Exception as e:
        print(e, "–æ—à–∏–±–∫–∞ –Ω–∞ 306 —Å—Ç—Ä–æ–∫–µ")
        await bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é")
@dp.message_handler(state=user.numbers_percent)
async def get_summa_stavki(message: types.Message, state: FSMContext):
    await state.update_data(numbers_percent=message.text)
    data = await state.get_data()
    try:
        if data['numbers_percent'] != '>50' and data['numbers_percent'] != '<50' and data['numbers_percent'] != '=50': #–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
            await bot.send_message(message.from_user.id, f"–í—ã –≤–≤–µ–ª–∏ *–Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç*! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start\n\n\n{data['numbers_percent']}", parse_mode='MARKDOWN')
            await state.finish() 
        elif data['numbers_percent'] == '>50' and db.change_win(message.from_user.id)[0][0] == 1:
            await bot.send_message(message.from_user.id, f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üçÄ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - *{random.randint(51, 100)}*", parse_mode='MARKDOWN')
            db.change_balance_plus(data['summa_stavki']*2, message.from_user.id)
            await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]}RUB*", parse_mode='MARKDOWN')
            await state.finish()
        elif data['numbers_percent'] == '>50' and db.change_win(message.from_user.id)[0][0] == 0:
            await bot.send_message(message.from_user.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üõë –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - *{random.randint(1, 50)}*", parse_mode='MARKDOWN')
            db.change_balance_minus(data['summa_stavki'], message.from_user.id)
            await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]} RUB*", parse_mode='MARKDOWN')
            await state.finish()
        elif data['numbers_percent'] == '=50' and db.change_win(message.from_user.id)[0][0] == 1:
            await bot.send_message(message.from_user.id, "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üçÄ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - *50*", parse_mode='MARKDOWN')
            db.change_balance_plus(data['summa_stavki']*10, message.from_user.id)
            await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]}RUB*", parse_mode='MARKDOWN')
            await state.finish()
        elif data['numbers_percent'] == '=50' and db.change_win(message.from_user.id)[0][0] == 0:
            await bot.send_message(message.from_user.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üõë –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - *{random.randint(1, 50)}*", parse_mode='MARKDOWN')
            db.change_balance_minus(data['summa_stavki'], message.from_user.id)
            await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]}RUB*", parse_mode='MARKDOWN')
            await state.finish()
        elif data['numbers_percent'] == '<50' and db.change_win(message.from_user.id)[0][0] == 0:
            await bot.send_message(message.from_user.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üõë –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - *{random.randint(50, 100)}*", parse_mode='MARKDOWN')
            db.change_balance_minus(data['summa_stavki'], message.from_user.id)
            await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]}RUB*", parse_mode='MARKDOWN')
            await state.finish()
        elif data['numbers_percent'] == '<50' and db.change_win(message.from_user.id)[0][0] == 1:
            await bot.send_message(message.from_user.id, f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üçÄ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - *{random.randint(0, 50)}*", parse_mode='MARKDOWN')
            db.change_balance_plus(data['summa_stavki']*2, message.from_user.id)
            await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]}RUB*", parse_mode='MARKDOWN')
            await state.finish()
        else:
            print(type(db.change_win(message.from_user.id)[0][0]))
            await bot.send_message(message.from_user.id, f"–¢–∞–∫ –≤–æ—Ç —Å—É–∫–∞\n {data['numbers_percent']}\n {db.change_win(message.from_user.id)[0][0]}", parse_mode='MARKDOWN')
            await state.finish()
    except Exception as e:
        print(e)
        
@dp.callback_query_handler(text='dice')
async def dice(message: types.Message):
    await bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ üî•\n–í–∞—à –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]} RUB*\n –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ `–ª—é–±–æ–π —Å–∏–º–≤–æ–ª`", parse_mode='MARKDOWN')
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ üî•\n–í–∞—à –±–∞–ª–∞–Ω—Å: {db.show_balance(message.from_user.id)[0][0]} RUB")
    await user.summa_stavki2.set()

@dp.message_handler(state=user.summa_stavki2)
async def get_summa_stavki2(message: types.Message, state: FSMContext):
    try:
        await state.update_data(summa_stavki2=int(message.text))
        data = await state.get_data()
        await bot.send_message(message.from_user.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å {db.show_balance(message.from_user.id)}")
    except:
        await bot.send_message(message.from_user.id, f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        await state.finish()
        return "Hello world"
    print(db.show_balance(message.from_user.id)[0][0])
    if db.show_balance(message.from_user.id)[0][0] <=0:
        await bot.send_message(message.from_user.id, "–í–∞—à –±–∞–ª–∞–Ω—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è* –∏–≥—Ä—ã!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start", parse_mode='MARKDOWN')
        await state.finish()
    if data['summa_stavki2'] > db.show_balance(message.from_user.id)[0][0]:
        await bot.send_message(message.from_user.id, "–í–∞—à –±–∞–ª–∞–Ω—Å *–º–µ–Ω—å—à–µ —Å—É–º–º—ã* —Å—Ç–∞–≤–∫–∏! \n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start", parse_mode='MARKDOWN')
        await state.finish()
        return "HELLO WORLD"
    if db.change_win(message.from_user.id)[0][0] == 1:
        a = random.randint(5,6)
        if a == 6:
            await bot.send_animation(chat_id=message.from_user.id, animation=InputFile('dice/6.tgs'))
        elif a == 5:
            await bot.send_animation(chat_id=message.from_user.id, animation=InputFile('dice/5.tgs'))
        await bot.send_animation(chat_id=message.from_user.id, animation=InputFile('dice/1.tgs'))
        await bot.send_message(message.from_user.id, f"üíö –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n –í–∞—à–µ —á–∏—Å–ª–æ - *{a}*, —á–∏—Å–ª–æ –±–æ—Ç–∞ - *1*", parse_mode='MARKDOWN')
        db.change_balance_plus(data['summa_stavki2']*2, message.from_user.id)
        await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]}RUB*", parse_mode='MARKDOWN')
        await state.finish()
    if db.change_win(message.from_user.id)[0][0] == 0:
        a = random.randint(5,6)
        b = random.randint(1,4)
        if a == 6:
            await bot.send_animation(chat_id=message.from_user.id, animation=InputFile('dice/6.tgs'))
        elif a == 5:
            await bot.send_animation(chat_id=message.from_user.id, animation=InputFile('dice/5.tgs'))
        await bot.send_animation(chat_id=message.from_user.id, animation=InputFile(f'dice/{b}.tgs'))
        await bot.send_message(message.from_user.id, f"ü§ç –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n –í–∞—à–µ —á–∏—Å–ª–æ - *{b}*", parse_mode='MARKDOWN')
        db.change_balance_minus(data['summa_stavki2'], message.from_user.id)
        await bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.show_balance(message.from_user.id)[0][0]}RUB*", parse_mode='MARKDOWN')
        await state.finish()

@dp.callback_query_handler(text='VIVOD')
async def VIVOD(message: types.Message):
    await bot.send_message(message.from_user.id, f"üì§ *–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:*\n üí≥ –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –í–∞—à –±–∞–ª–∞–Ω—Å!", parse_mode='MARKDOWN')
    await message.answer(f"üì§ *–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:*\n üí≥ –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –í–∞—à –±–∞–ª–∞–Ω—Å!")
    await user.vivod_card.set()

@dp.message_handler(state=user.vivod_card)
async def vivod_card(message: types.Message, state: FSMContext):
    try:
        await state.update_data(vivod_card=int(message.text))
        data = await state.get_data()
    except:
        await bot.send_message(message.from_user.id, f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")
        await state.finish()
    if len(str(data['vivod_card'])) != 11:
        await bot.send_message(message.from_user.id, f"*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.*", reply_markup='MARKDOWN')
        await state.finish()
    if len(str(data['vivod_card'])) == 11 and str(data['vivod_card']) != '79196305107':
        await bot.send_message(message.from_user.id, f"üõ†Ô∏è –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ QIWI –∫–æ—à–µ–ª—å–∫–∏ –∏–ª–∏ –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö *–ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å!*\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫—É: @ijustwait", parse_mode='MARKDOWN')
        await state.finish()
    if len(str(data['vivod_card'])) == 11 and str(data['vivod_card']) == '79196305107':
        await message.answer(f"üì§ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞üí≥:")
        await user.summa_vivoda.set()
@dp.message_handler(state=user.summa_vivoda)
async def summa_vivoda(message: types.Message, state: FSMContext):
    await state.update_data(summa_vivoda=int(message.text))
    data = await state.get_data()
    if db.show_balance(message.from_user.id)[0][0] < int(data['summa_vivoda']):
        await bot.send_message(message.from_user.id, f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤* –¥–ª—è –≤—ã–≤–æ–¥–∞\n –í–∞—à –±–∞–ª–∞–Ω—Å: `{db.show_balance(message.from_user.id)[0][0]}`*RUB*\n –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏: {data['summa_vivoda']}", parse_mode='MARKDOWN')
        await state.finish()
    else:
        db.withdrawals(data['summa_vivoda'], message.from_user.id)
        await bot.send_message(message.from_user.id, f"–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–≤–æ–¥–∞!", parse_mode='MARKDOWN')
        await state.finish()

@dp.callback_query_handler(text='POPOLNENIE')
async def POPOLNENIE(message: types.Message):
    await bot.send_message(message.from_user.id, f"üì•* –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 3000 –¥–æ 25000 RUB:*", parse_mode='MARKDOWN')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 3000 –¥–æ 25000 RUB:")
    await user.summa_popolnenie.set()

@dp.message_handler(state=user.summa_popolnenie)
async def summa_popolnenie(message: types.Message, state: FSMContext):
    await state.update_data(summa_popolnenie=int(message.text))
    data = await state.get_data()
    support_button = InlineKeyboardButton(text='üë®‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/ijustwait')
    back_button = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='startingg')
    sp_keyboard = InlineKeyboardMarkup()
    sp_keyboard.row(support_button)
    sp_keyboard.row(back_button)
    await bot.send_message(message.from_user.id, f"üë®‚Äçüíª –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (http://t.me/https://t.me/ijustwait) —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n *–ù–µ –ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –ù–ï –≥–æ—Ç–æ–≤—ã —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ –ù–ï —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã ‚Äî –í—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.*", parse_mode='MARKDOWN', reply_markup=sp_keyboard)
    await state.finish()





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
